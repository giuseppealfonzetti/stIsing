// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ncl
Rcpp::List ncl(Eigen::MatrixXd& DATA, Eigen::VectorXd& THETA, std::vector<bool>& CONSTRAINTS, const bool VERBOSEFLAG);
RcppExport SEXP _stIsing_ncl(SEXP DATASEXP, SEXP THETASEXP, SEXP CONSTRAINTSSEXP, SEXP VERBOSEFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type DATA(DATASEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< std::vector<bool>& >::type CONSTRAINTS(CONSTRAINTSSEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSEFLAG(VERBOSEFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(ncl(DATA, THETA, CONSTRAINTS, VERBOSEFLAG));
    return rcpp_result_gen;
END_RCPP
}
// isingGraph
Rcpp::List isingGraph(const Eigen::MatrixXd& DATA, const Eigen::VectorXd& THETA_INIT, const std::vector<bool>& CONSTRAINTS, const unsigned int MAXT, const unsigned int BURN, const double STEPSIZE, const double NU, const int METHODFLAG, Eigen::VectorXd SCALEVEC, const unsigned int SEED, const bool VERBOSEFLAG, const double PAR1, const double PAR2, const double PAR3, const int STEPSIZEFLAG);
RcppExport SEXP _stIsing_isingGraph(SEXP DATASEXP, SEXP THETA_INITSEXP, SEXP CONSTRAINTSSEXP, SEXP MAXTSEXP, SEXP BURNSEXP, SEXP STEPSIZESEXP, SEXP NUSEXP, SEXP METHODFLAGSEXP, SEXP SCALEVECSEXP, SEXP SEEDSEXP, SEXP VERBOSEFLAGSEXP, SEXP PAR1SEXP, SEXP PAR2SEXP, SEXP PAR3SEXP, SEXP STEPSIZEFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type DATA(DATASEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type THETA_INIT(THETA_INITSEXP);
    Rcpp::traits::input_parameter< const std::vector<bool>& >::type CONSTRAINTS(CONSTRAINTSSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type MAXT(MAXTSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type BURN(BURNSEXP);
    Rcpp::traits::input_parameter< const double >::type STEPSIZE(STEPSIZESEXP);
    Rcpp::traits::input_parameter< const double >::type NU(NUSEXP);
    Rcpp::traits::input_parameter< const int >::type METHODFLAG(METHODFLAGSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type SCALEVEC(SCALEVECSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type SEED(SEEDSEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSEFLAG(VERBOSEFLAGSEXP);
    Rcpp::traits::input_parameter< const double >::type PAR1(PAR1SEXP);
    Rcpp::traits::input_parameter< const double >::type PAR2(PAR2SEXP);
    Rcpp::traits::input_parameter< const double >::type PAR3(PAR3SEXP);
    Rcpp::traits::input_parameter< const int >::type STEPSIZEFLAG(STEPSIZEFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(isingGraph(DATA, THETA_INIT, CONSTRAINTS, MAXT, BURN, STEPSIZE, NU, METHODFLAG, SCALEVEC, SEED, VERBOSEFLAG, PAR1, PAR2, PAR3, STEPSIZEFLAG));
    return rcpp_result_gen;
END_RCPP
}
// rmultinom_wrapper
Rcpp::NumericMatrix rmultinom_wrapper(const double prob, const unsigned int classes, const unsigned int batch, const unsigned int K);
RcppExport SEXP _stIsing_rmultinom_wrapper(SEXP probSEXP, SEXP classesSEXP, SEXP batchSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultinom_wrapper(prob, classes, batch, K));
    return rcpp_result_gen;
END_RCPP
}
// sampleH
Eigen::MatrixXd sampleH(Eigen::VectorXd THETA, Eigen::MatrixXd DATA, std::vector<bool>& CONSTRAINTS, const bool INVERTFLAG, const bool VERBOSEFLAG);
RcppExport SEXP _stIsing_sampleH(SEXP THETASEXP, SEXP DATASEXP, SEXP CONSTRAINTSSEXP, SEXP INVERTFLAGSEXP, SEXP VERBOSEFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type DATA(DATASEXP);
    Rcpp::traits::input_parameter< std::vector<bool>& >::type CONSTRAINTS(CONSTRAINTSSEXP);
    Rcpp::traits::input_parameter< const bool >::type INVERTFLAG(INVERTFLAGSEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSEFLAG(VERBOSEFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleH(THETA, DATA, CONSTRAINTS, INVERTFLAG, VERBOSEFLAG));
    return rcpp_result_gen;
END_RCPP
}
// sampleJ
Eigen::MatrixXd sampleJ(Eigen::VectorXd THETA, Eigen::MatrixXd DATA, std::vector<bool>& CONSTRAINTS, const bool VERBOSEFLAG);
RcppExport SEXP _stIsing_sampleJ(SEXP THETASEXP, SEXP DATASEXP, SEXP CONSTRAINTSSEXP, SEXP VERBOSEFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type DATA(DATASEXP);
    Rcpp::traits::input_parameter< std::vector<bool>& >::type CONSTRAINTS(CONSTRAINTSSEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSEFLAG(VERBOSEFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleJ(THETA, DATA, CONSTRAINTS, VERBOSEFLAG));
    return rcpp_result_gen;
END_RCPP
}
// sampleVar
Rcpp::List sampleVar(Eigen::VectorXd THETA, Eigen::MatrixXd DATA, std::vector<bool>& CONSTRAINTS, const unsigned int NU, const unsigned int METHOD, const unsigned int RANGE, const bool TOTFLAG, const bool PRINTFLAG);
RcppExport SEXP _stIsing_sampleVar(SEXP THETASEXP, SEXP DATASEXP, SEXP CONSTRAINTSSEXP, SEXP NUSEXP, SEXP METHODSEXP, SEXP RANGESEXP, SEXP TOTFLAGSEXP, SEXP PRINTFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type DATA(DATASEXP);
    Rcpp::traits::input_parameter< std::vector<bool>& >::type CONSTRAINTS(CONSTRAINTSSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type NU(NUSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type METHOD(METHODSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type RANGE(RANGESEXP);
    Rcpp::traits::input_parameter< const bool >::type TOTFLAG(TOTFLAGSEXP);
    Rcpp::traits::input_parameter< const bool >::type PRINTFLAG(PRINTFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleVar(THETA, DATA, CONSTRAINTS, NU, METHOD, RANGE, TOTFLAG, PRINTFLAG));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_stIsing_ncl", (DL_FUNC) &_stIsing_ncl, 4},
    {"_stIsing_isingGraph", (DL_FUNC) &_stIsing_isingGraph, 15},
    {"_stIsing_rmultinom_wrapper", (DL_FUNC) &_stIsing_rmultinom_wrapper, 4},
    {"_stIsing_sampleH", (DL_FUNC) &_stIsing_sampleH, 5},
    {"_stIsing_sampleJ", (DL_FUNC) &_stIsing_sampleJ, 4},
    {"_stIsing_sampleVar", (DL_FUNC) &_stIsing_sampleVar, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_stIsing(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
