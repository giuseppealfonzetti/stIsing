STEPSIZE = 2.5,
NU = 1,
SEED = 1
)
fit_scsd <- fit_isingGraph(
DATA_LIST = list(DATA = as.matrix(data), CONSTRAINTS = Q),
METHOD = 'CSGD_bernoulli',
CPP_CONTROL = cpp_ctrl,
#UCMINF_CONTROL = list(),
INIT = theta_init,
ITERATIONS_SUBSET = NULL,
VERBOSEFLAG = 0
)
#fit$theta
mean((fit_uc$theta-true_theta)^2)
mean((fit_sgd$theta-true_theta)^2)
mean((fit_scsd$theta-true_theta)^2)
mean((theta_init-true_theta)^2)
gg <- get_tidy_path(fit_sgd, 'path_av_theta') %>%
mutate( mod = 'OSGD') %>%
bind_rows(
get_tidy_path(fit_scsd, 'path_av_theta') %>%
mutate( mod = 'CSGD_bernoulli')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-true_theta)^2))
) %>%
ggplot( aes(x = iter, y = log(mse), col = mod))+
geom_line()+
geom_hline(yintercept = log(mean((fit_uc$theta-true_theta)^2)), linetype = 'dashed')+
theme_minimal()
plotly::ggplotly(gg)
# eta <- 5
# ncl(as.matrix(data[1,]), theta_init, Q, VERBOSEFLAG = F)$nll
# gr <- ncl(as.matrix(data[1,]), theta_init, Q, VERBOSEFLAG = F)$ngr
# ncl(as.matrix(data[1,]), theta_init-eta*gr, Q, VERBOSEFLAG = F)$nll
cpp_ctrl <- list(
MAXT = 20000,
BURN = 1000,
STEPSIZE = 2,
NU = 1,
SEED = 1
)
fit_sgd <- fit_isingGraph(
DATA_LIST = list(DATA = as.matrix(data), CONSTRAINTS = Q),
METHOD = 'OSGD',
CPP_CONTROL = cpp_ctrl,
#UCMINF_CONTROL = list(),
INIT = theta_init,
ITERATIONS_SUBSET = NULL,
VERBOSEFLAG = 0
)
gg <- get_tidy_path(fit_sgd, 'path_av_theta') %>%
mutate( mod = 'OSGD') %>%
bind_rows(
get_tidy_path(fit_scsd, 'path_av_theta') %>%
mutate( mod = 'CSGD_bernoulli')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-true_theta)^2))
) %>%
ggplot( aes(x = iter, y = log(mse), col = mod))+
geom_line()+
geom_hline(yintercept = log(mean((fit_uc$theta-true_theta)^2)), linetype = 'dashed')+
theme_minimal()
plotly::ggplotly(gg)
# eta <- 5
seed <- 2
set.seed(seed)
data <- IsingSampler::IsingSampler(n, graph_mat, thr_vec, 1, method = "direct")
##### optimisation #######
theta_init <- rep(0, length(true_theta))
# theta_init <- true_theta + runif(length(true_theta), -1, 1)
#
# #numDeriv::grad(ising_graph_lik, true_theta) - ising_graph_gradient(true_theta)
#
cpp_ctrl <- list(
MAXT = 5000,
BURN = 1000,
NU = 1,
SEED = 1
)
stepsize_tuning(
DATA_LIST = list(DATA = as.matrix(data), CONSTRAINTS = Q),
METHOD = 'CSGD_bernoulli',
CPP_CONTROL = cpp_ctrl,
INIT = theta_init,
STEPSIZE_GRID = seq(0,5,.5),
VERBOSEFLAG = 0
)
cpp_ctrl <- list(
MAXT = 5000,
BURN = 1000,
NU = 1,
SEED = 1
)
stepsize_tuning(
DATA_LIST = list(DATA = as.matrix(data), CONSTRAINTS = Q),
METHOD = 'OSGD',
CPP_CONTROL = cpp_ctrl,
INIT = theta_init,
STEPSIZE_GRID = seq(0,5,.5),
VERBOSEFLAG = 0
)
cpp_ctrl <- list(
MAXT = 20000,
BURN = 1000,
STEPSIZE = 2.5,
NU = 1,
SEED = 1
)
fit_sgd <- fit_isingGraph(
DATA_LIST = list(DATA = as.matrix(data), CONSTRAINTS = Q),
METHOD = 'OSGD',
CPP_CONTROL = cpp_ctrl,
#UCMINF_CONTROL = list(),
INIT = theta_init,
ITERATIONS_SUBSET = NULL,
VERBOSEFLAG = 0
)
fit_sgd$clock
summary(clock, units = 's')
cpp_ctrl <- list(
MAXT = 20000,
BURN = 1000,
STEPSIZE = 1,
NU = 1,
SEED = 1
)
fit_scsd <- fit_isingGraph(
DATA_LIST = list(DATA = as.matrix(data), CONSTRAINTS = Q),
METHOD = 'CSGD_bernoulli',
CPP_CONTROL = cpp_ctrl,
#UCMINF_CONTROL = list(),
INIT = theta_init,
ITERATIONS_SUBSET = NULL,
VERBOSEFLAG = 0
)
#fit$theta
mean((fit_uc$theta-true_theta)^2)
mean((fit_sgd$theta-true_theta)^2)
mean((fit_scsd$theta-true_theta)^2)
mean((theta_init-true_theta)^2)
gg <- get_tidy_path(fit_sgd, 'path_av_theta') %>%
mutate( mod = 'OSGD') %>%
bind_rows(
get_tidy_path(fit_scsd, 'path_av_theta') %>%
mutate( mod = 'CSGD_bernoulli')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-true_theta)^2))
) %>%
ggplot( aes(x = iter, y = log(mse), col = mod))+
geom_line()+
geom_hline(yintercept = log(mean((fit_uc$theta-true_theta)^2)), linetype = 'dashed')+
theme_minimal()
plotly::ggplotly(gg)
cpp_ctrl <- list(
MAXT = 20000,
BURN = 1000,
STEPSIZE = 1,
NU = 1,
SEED = 1
)
fit_sgd <- fit_isingGraph(
DATA_LIST = list(DATA = as.matrix(data), CONSTRAINTS = Q),
METHOD = 'OSGD',
CPP_CONTROL = cpp_ctrl,
#UCMINF_CONTROL = list(),
INIT = theta_init,
ITERATIONS_SUBSET = NULL,
VERBOSEFLAG = 0
)
gg <- get_tidy_path(fit_sgd, 'path_av_theta') %>%
mutate( mod = 'OSGD') %>%
bind_rows(
get_tidy_path(fit_scsd, 'path_av_theta') %>%
mutate( mod = 'CSGD_bernoulli')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-true_theta)^2))
) %>%
ggplot( aes(x = iter, y = log(mse), col = mod))+
geom_line()+
geom_hline(yintercept = log(mean((fit_uc$theta-true_theta)^2)), linetype = 'dashed')+
theme_minimal()
plotly::ggplotly(gg)
gg <- get_tidy_path(fit_sgd, 'path_av_theta') %>%
mutate( mod = 'OSGD') %>%
bind_rows(
get_tidy_path(fit_scsd, 'path_av_theta') %>%
mutate( mod = 'CSGD_bernoulli')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-true_theta)^2))
) %>%
ggplot( aes(x = iter, y = (mse), col = mod))+
geom_line()+
geom_hline(yintercept = (mean((fit_uc$theta-true_theta)^2)), linetype = 'dashed')+
theme_minimal()
plotly::ggplotly(gg)
cpp_ctrl <- list(
MAXT = 20000,
BURN = 1000,
STEPSIZE = 2,
NU = 1,
SEED = 1
)
fit_sgd <- fit_isingGraph(
DATA_LIST = list(DATA = as.matrix(data), CONSTRAINTS = Q),
METHOD = 'OSGD',
CPP_CONTROL = cpp_ctrl,
#UCMINF_CONTROL = list(),
INIT = theta_init,
ITERATIONS_SUBSET = NULL,
VERBOSEFLAG = 0
)
fit_sgd$clock
summary(clock, units = 's')
cpp_ctrl <- list(
MAXT = 20000,
BURN = 1000,
STEPSIZE = 2,
NU = 1,
SEED = 1
)
fit_scsd <- fit_isingGraph(
DATA_LIST = list(DATA = as.matrix(data), CONSTRAINTS = Q),
METHOD = 'CSGD_bernoulli',
CPP_CONTROL = cpp_ctrl,
#UCMINF_CONTROL = list(),
INIT = theta_init,
ITERATIONS_SUBSET = NULL,
VERBOSEFLAG = 0
)
#fit$theta
mean((fit_uc$theta-true_theta)^2)
mean((fit_sgd$theta-true_theta)^2)
mean((fit_scsd$theta-true_theta)^2)
mean((theta_init-true_theta)^2)
gg <- get_tidy_path(fit_sgd, 'path_av_theta') %>%
mutate( mod = 'OSGD') %>%
bind_rows(
get_tidy_path(fit_scsd, 'path_av_theta') %>%
mutate( mod = 'CSGD_bernoulli')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-true_theta)^2))
) %>%
ggplot( aes(x = iter, y = (mse), col = mod))+
geom_line()+
geom_hline(yintercept = (mean((fit_uc$theta-true_theta)^2)), linetype = 'dashed')+
theme_minimal()
plotly::ggplotly(gg)
library(stIsing)
library(tidyverse)
##### functions #####
ising_graph_lik <- function(par){
ncl(as.matrix(data), par, Q, VERBOSEFLAG = F)$nll
}
ising_graph_gradient <- function(par){
ncl(as.matrix(data), par, Q, VERBOSEFLAG = F)$ngradient
}
##### setup parameters ######
p <- 20
d <- p + p*(p-1)/2
n <- 4000
parNodes <- rep(c(-1,1), p/2)
parEdgesMat <- matrix(0,p, p)
counter <- 1
for (col in 1:(p-1)) {
for (row in (col+1):p) {
if(abs(col-row)==1 & (min(col,row)!=p/2)) parEdgesMat[row, col] <- .5
if(abs(col-row)==p/2) parEdgesMat[row, col] <- -.5
# parEdgesMat[row, col] <- counter
# counter <- counter + 1
}
}
#parEdgesMat <- parEdgesMat + t(parEdgesMat) - diag(diag(parEdgesMat))
parEdgesMat
corrplot::corrplot(parEdgesMat)
true_theta <- parNodes
for (col in 1:(p-1)) {
for (row in (col+1):p) {
true_theta <- c(true_theta, parEdgesMat[row, col])
}
}
true_theta
length(true_theta)
Q <- rep(TRUE, length(true_theta))
##### generate data ####
graph_mat <- ising_from_theta_to_emat(true_theta, p)
graph_mat <- graph_mat + t(graph_mat)
thr_vec <- true_theta[1:p]
seed <- 2
set.seed(seed)
data <- IsingSampler::IsingSampler(n, graph_mat, thr_vec, 1, method = "direct")
##### optimisation #######
theta_init <- rep(0, length(true_theta))
p <- 10
d <- p + p*(p-1)/2
n <- 2000
parNodes <- rep(c(-1,1), p/2)
parEdgesMat <- matrix(0,p, p)
counter <- 1
for (col in 1:(p-1)) {
for (row in (col+1):p) {
if(abs(col-row)==1 & (min(col,row)!=p/2)) parEdgesMat[row, col] <- .5
if(abs(col-row)==p/2) parEdgesMat[row, col] <- -.5
# parEdgesMat[row, col] <- counter
# counter <- counter + 1
}
}
#parEdgesMat <- parEdgesMat + t(parEdgesMat) - diag(diag(parEdgesMat))
parEdgesMat
corrplot::corrplot(parEdgesMat)
true_theta <- parNodes
for (col in 1:(p-1)) {
for (row in (col+1):p) {
true_theta <- c(true_theta, parEdgesMat[row, col])
}
}
true_theta
length(true_theta)
Q <- rep(TRUE, length(true_theta))
##### generate data ####
graph_mat <- ising_from_theta_to_emat(true_theta, p)
graph_mat <- graph_mat + t(graph_mat)
thr_vec <- true_theta[1:p]
seed <- 2
set.seed(seed)
data <- IsingSampler::IsingSampler(n, graph_mat, thr_vec, 1, method = "direct")
##### optimisation #######
theta_init <- rep(0, length(true_theta))
#     VERBOSEFLAG = F
# )
# H <- sampleH(THETA =theta_init, DATA = as.matrix(data)/1, CONSTRAINTS = Q, INVERTFLAG = F)
# diag(H)
# Hnum <- numDeriv::jacobian(ising_graph_gradient, theta_init)/n
# diag(Hnum)
# diag(H)-diag(Hnum)
# mean((Opt$path_av_theta[nrow(Opt$path_av_theta),]-true_theta)^2)
# mean((opt$par-true_theta)^2)
# mean((rep(0, length(true_theta))-true_theta)^2)
cpp_ctrl <- list(
MAXT = 5000,
BURN = 1000,
NU = 1,
SEED = 1
)
cpp_ctrl <- list(
MAXT = 10000,
BURN = 1000,
STEPSIZE = 2,
NU = 1,
SEED = 1
)
fit_sgd <- fit_isingGraph(
DATA_LIST = list(DATA = as.matrix(data), CONSTRAINTS = Q),
METHOD = 'OSGD',
CPP_CONTROL = cpp_ctrl,
#UCMINF_CONTROL = list(),
INIT = theta_init,
ITERATIONS_SUBSET = NULL,
VERBOSEFLAG = 0
)
fit_sgd$clock
fit_sgd$path_av_theta[(cpp_ctrl$BURN + 1):nrow(fit_sgd$path_av_theta),]
(cpp_ctrl$BURN + 1)
nrow(fit_sgd$path_av_theta)
nrows(fit_sgd$path_av_theta)
nrow(fit_sgd$path_av_theta)
fit_sgd$path_av_theta
fit_sgd$path_av_theta
fit_sgd
fit_sgd$fit$path_av_theta[(cpp_ctrl$BURN + 1):nrow(fit_sgd$fit$path_av_theta),]
sapply(
fit_sgd$fit$path_av_theta[(cpp_ctrl$BURN + 1):nrow(fit_sgd$fit$path_av_theta),],
functio(x) ncl(x)
sapply(
fit_sgd$fit$path_av_theta[(cpp_ctrl$BURN + 1):nrow(fit_sgd$fit$path_av_theta),],
functio(x){ ncl(x)}
sapply(
fit_sgd$fit$path_av_theta[(cpp_ctrl$BURN + 1):nrow(fit_sgd$fit$path_av_theta),],
functio(x){ ncl(x)}
map(
fit_sgd$fit$path_av_theta[(cpp_ctrl$BURN + 1):nrow(fit_sgd$fit$path_av_theta),],
~ ncl(.x)
)
map(
fit_sgd$fit$path_av_theta[(cpp_ctrl$BURN + 1):nrow(fit_sgd$fit$path_av_theta),],
~ ncl(as.matrix(data), .x, Q, VERBOSEFLAG = F)$nll
)
fit_sgd$fit$path_av_theta[(cpp_ctrl$BURN + 1):nrow(fit_sgd$fit$path_av_theta),]
purrr::transpose(fit_sgd$fit$path_av_theta[(cpp_ctrl$BURN + 1):nrow(fit_sgd$fit$path_av_theta),])
matrix(rep(c(1,2,3), 5), 5,3)
matrix(rep(c(1,2,3), 5), 5,3, byrow = T)
mat <- matrix(rep(c(1,2,3), 5), 5,3, byrow = T)
as.list(mat)
purrr::transpose(as.list(mat))
purrr::transpose(.l = mat)
purrr::transpose(.l = as.tibble(mat))
mat <- as_tibble(matrix(rep(c(1,2,3), 5), 5,3, byrow = T))
purrr::transpose(.l = mat)
path <- as_tibble(fit_sgd$fit$path_av_theta[(cpp_ctrl$BURN + 1):nrow(fit_sgd$fit$path_av_theta),])
path
map_dbl(
purrr::transpose(path),
~ ncl(as.matrix(data), .x, Q, VERBOSEFLAG = F)$nll
)
purrr::transpose(path)
purrr::transpose(.l = mat)
mat <- matrix(rep(c(1,2,3), 5), 5,3, byrow = T)
as.list(data.frame(t(M)))
as.list(data.frame(t(mat)))
path <- fit_sgd$fit$path_av_theta[(cpp_ctrl$BURN + 1):nrow(fit_sgd$fit$path_av_theta),]
map_dbl(
as.list(data.frame(t(path))),
~ ncl(as.matrix(data), .x, Q, VERBOSEFLAG = F)$nll
)
path <- fit_sgd$fit$path_av_theta[(nrow(fit_sgd$fit$path_av_theta)-1000):nrow(fit_sgd$fit$path_av_theta),]
nll_vec <- map_dbl(
as.list(data.frame(t(path))),
~ ncl(as.matrix(data), .x, Q, VERBOSEFLAG = F)$nll
)
nll_vec
mean(nll_vec)
library(stIsing)
#     VERBOSEFLAG = F
# )
# H <- sampleH(THETA =theta_init, DATA = as.matrix(data)/1, CONSTRAINTS = Q, INVERTFLAG = F)
# diag(H)
# Hnum <- numDeriv::jacobian(ising_graph_gradient, theta_init)/n
# diag(Hnum)
# diag(H)-diag(Hnum)
# mean((Opt$path_av_theta[nrow(Opt$path_av_theta),]-true_theta)^2)
# mean((opt$par-true_theta)^2)
# mean((rep(0, length(true_theta))-true_theta)^2)
cpp_ctrl <- list(
MAXT = 5000,
BURN = 1000,
NU = 1,
SEED = 1
)
stepsize_tuning(
DATA_LIST = list(DATA = as.matrix(data), CONSTRAINTS = Q),
METHOD = 'OSGD',
CPP_CONTROL = cpp_ctrl,
INIT = theta_init,
STEPSIZE_GRID = seq(0,5,.5),
VERBOSEFLAG = 0
)
p <- 20
d <- p + p*(p-1)/2
n <- 4000
parNodes <- rep(c(-1,1), p/2)
parEdgesMat <- matrix(0,p, p)
counter <- 1
for (col in 1:(p-1)) {
for (row in (col+1):p) {
if(abs(col-row)==1 & (min(col,row)!=p/2)) parEdgesMat[row, col] <- .5
if(abs(col-row)==p/2) parEdgesMat[row, col] <- -.5
# parEdgesMat[row, col] <- counter
# counter <- counter + 1
}
}
#parEdgesMat <- parEdgesMat + t(parEdgesMat) - diag(diag(parEdgesMat))
parEdgesMat
corrplot::corrplot(parEdgesMat)
true_theta <- parNodes
for (col in 1:(p-1)) {
for (row in (col+1):p) {
true_theta <- c(true_theta, parEdgesMat[row, col])
}
}
true_theta
length(true_theta)
Q <- rep(TRUE, length(true_theta))
##### generate data ####
graph_mat <- ising_from_theta_to_emat(true_theta, p)
graph_mat <- graph_mat + t(graph_mat)
thr_vec <- true_theta[1:p]
seed <- 1
set.seed(seed)
data <- IsingSampler::IsingSampler(n, graph_mat, thr_vec, 1, method = "direct")
##### optimisation #######
theta_init <- rep(0, length(true_theta))
#     VERBOSEFLAG = F
# )
# H <- sampleH(THETA =theta_init, DATA = as.matrix(data)/1, CONSTRAINTS = Q, INVERTFLAG = F)
# diag(H)
# Hnum <- numDeriv::jacobian(ising_graph_gradient, theta_init)/n
# diag(Hnum)
# diag(H)-diag(Hnum)
# mean((Opt$path_av_theta[nrow(Opt$path_av_theta),]-true_theta)^2)
# mean((opt$par-true_theta)^2)
# mean((rep(0, length(true_theta))-true_theta)^2)
cpp_ctrl <- list(
MAXT = 3000,
BURN = 1000,
NU = 1,
SEED = 1
)
stepsize_tuning(
DATA_LIST = list(DATA = as.matrix(data), CONSTRAINTS = Q),
METHOD = 'OSGD',
CPP_CONTROL = cpp_ctrl,
INIT = theta_init,
STEPSIZE_GRID = seq(0.5,4,.5),
VERBOSEFLAG = 0
)
library(stIsing)
